/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Rest;

import Hibernate.HibernateStuff;
import Model.Note;
import Model.Person;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.Consumes;
import javax.ws.rs.Produces;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PUT;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.MediaType;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

/**
 * REST Web Service
 *
 * @author Niklas
 */
@Path("person")
public class PersonResource {

    @Context
    private UriInfo context;

    /**
     * Creates a new instance of PersonResource
     */
    public PersonResource() {
    }

    /**
     * Retrieves representation of an instance of Rest.PersonResource
     *
     * @return an instance of java.lang.String
     */
    @GET
    @Produces(MediaType.APPLICATION_XML)
    public void getXml() {
        //TODO remove after test
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();
        
        
        Note n1 = new Note("First Message","Very importaint Message");
        Note n2 = new Note("Second Message","Very importaint Message");
        Note n3 = new Note("Third Message","Very importaint Message");
        
        session.saveOrUpdate(n1);
        session.saveOrUpdate(n2);
        session.saveOrUpdate(n3);
        session.getTransaction().commit();
    }

    /**
     * PUT method for updating or creating an instance of PersonResource
     *
     * @param content representation for the resource
     */
    
    
    //Adds a New person to the sql tables
    @PUT
    @Consumes(MediaType.TEXT_PLAIN)

    public String putXml(String content) throws Exception {
        String[] stringArray = content.split(",");

        
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", stringArray[0])).list();
        
        
        //checks if username exists in sql tables
        if(userPersons.isEmpty()){
        Person p1 = new Person(stringArray[0], stringArray[1], stringArray[2], 0, new HashMap<Long, Note>(), new ArrayList<Note>());
        session.saveOrUpdate(p1);
        session.getTransaction().commit();
        return "Correct";
        }
        else {
            session.getTransaction().commit();
            throw new Exception("Username exists!");
        }
    }

    //returns full xml of person given as path parameter
    @Path("/{userId}/{userPassword}/{personId}/")
    @GET
    @Produces(MediaType.APPLICATION_XML)
    public Person getPerson(@PathParam("personId") String id, @PathParam("userId") String userId, @PathParam("userPassword") String userPassword) throws Exception {
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        //checking that the users given passwords are correct 
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        if (userPerson.getPassword().equals(userPassword)) {

            List persons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", id)).list();
            session.getTransaction().commit();
            Person person = (Person) persons.get(0);

            return person;
        } else {
            session.getTransaction().commit();
            throw new Exception("Wrong username or password");
        }

    }
    
    //Return all unassigned notes
    @Path("/{userId}/{userPassword}/UnassignedNotes")
    @GET
    @Produces(MediaType.APPLICATION_XML)
    public List<Note> getUnassignedNotes(@PathParam("userId") String userId, @PathParam("userPassword") String userPassword) throws Exception{
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();
        
        //checking that the users given passwords are correct 
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        if (userPerson.getPassword().equals(userPassword)) {
            List<Note> notes = session.createCriteria(Note.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("isAssigned", 0)).list();
            session.getTransaction().commit();
            return notes;
        } else {
            session.getTransaction().commit();
            throw new Exception("Wrong username or password");
        }
    }
            
    
    
    
    //Changes parameter persons email field to data given
    @Path("/{userId}/{userPassword}/email")
    @POST
    @Consumes(MediaType.TEXT_PLAIN)
    @Produces(MediaType.TEXT_PLAIN)
    public String setEmail(@PathParam("userId") String userId, @PathParam("userPassword") String userPassword, String Email){
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        //checking that the users given passwords are correct 
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        if (userPerson.getPassword().equals(userPassword)) {

            List persons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
            Person person = (Person) persons.get(0);
            
            person.setEmail(Email);
            
            session.saveOrUpdate(person);
            session.getTransaction().commit();
            
            return person.getEmail();
        }
        else {
            session.getTransaction().commit();
            return "Does not Work";
        }
    }

     //Changes parameter persons password field to data given
    @Path("/{userId}/{userPassword}/password")
    @POST
    @Consumes(MediaType.TEXT_PLAIN)
    @Produces(MediaType.TEXT_PLAIN)
    public String setPassword(@PathParam("userId") String userId, @PathParam("userPassword") String userPassword, String password) throws Exception {
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        //checking that the users given passwords are correct 
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        if (userPerson.getPassword().equals(userPassword)) {

            List persons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
            Person person = (Person) persons.get(0);
            
            person.setPassword(password);
            
            session.saveOrUpdate(person);
            session.getTransaction().commit();
            
            return person.getPassword();
        }
        else {
            session.getTransaction().commit();
            throw new Exception("Wrong Username or password");
        }
    }
    
     //Lists all Note that a person has
    @Path("/{userId}/{userPassword}/Note")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public List<Note> getAllNotes(@PathParam("userId") String userId, @PathParam("userPassword") String userPassword) throws Exception{
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();
        
        //checking that the users given passwords are correct 
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        if (userPerson.getPassword().equals(userPassword)) {
            
            List notes =  new ArrayList<Note>(userPerson.getPersonalNotes().values());
            session.getTransaction().commit();
            return notes;
        }
         else {
            session.getTransaction().commit();
            throw new Exception("Wrong Username or password");
        }
        
    }
    
    //puts selected note id into assiged note of person
    @Path("/{userId}/{userPassword}/Notes")
    @PUT
    @Consumes(MediaType.TEXT_PLAIN)
    @Produces(MediaType.APPLICATION_XML)
    public Note giveNoteToPerson(@PathParam("userId") String userId, @PathParam("userPassword") String userPassword, Long id) throws Exception{
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();
        
        //checking that the users given passwords are correct 
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        if (userPerson.getPassword().equals(userPassword)) {
        List notes = session.createCriteria(Note.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("id", id)).list();
        Note note = (Note)notes.get(0);
        note.setIsAssigned(1);
        userPerson.getPersonalNotes().put(note.getId(), note);
        
        session.saveOrUpdate(userPerson);
        session.getTransaction().commit();
        return note;
        } else {
            session.getTransaction().commit();
            throw new Exception("Wrong Username or password");
        }
    }
    
    @Path("/{userId}/{userPassword}/Compleated")
    @GET
    @Produces(MediaType.APPLICATION_XML)
    public List<Note> getCompleatedNotes(@PathParam("userId") String userId, @PathParam("userPassword") String userPassword) throws Exception{
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();
        
        //checking that the users given passwords are correct 
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        if (userPerson.getPassword().equals(userPassword)) {
            
            
            return userPersons;
        }else {
            session.getTransaction().commit();
            throw new Exception("Wrong Username or password");
        }
    }
    
    
    
}
