/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Rest;

import Hibernate.HibernateStuff;
import Model.Note;
import Model.Person;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.Produces;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PUT;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.MediaType;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

/**
 * REST Web Service
 *
 * @author Niklas
 */
@Path("person")
public class PersonResource {

    @Context
    private UriInfo context;

    /**
     * Creates a new instance of PersonResource
     */
    public PersonResource() {
    }

    /**
     * Retrieves representation of an instance of Rest.PersonResource
     *
     * @return an instance of java.lang.String
     */
    @GET
    @Produces(MediaType.APPLICATION_XML)
    public void getXml() {
        //TODO remove after test
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        Note n1 = new Note("First Message", "Very importaint Message" , "Nikke");
        Note n2 = new Note("Second Message", "Very importaint Message", "Nikke");
        Note n3 = new Note("Third Message", "Very importaint Message", "Nikke");

        session.saveOrUpdate(n1);
        session.saveOrUpdate(n2);
        session.saveOrUpdate(n3);
        session.getTransaction().commit();
    }

    /**
     * PUT method for updating or creating an instance of PersonResource
     *
     * @param content representation for the resource
     * @return
     */
    //Adds a New person to the sql tables
    @PUT
    @Consumes(MediaType.TEXT_PLAIN)
    @Produces("text/plain")
    public String putXml(String content) {
        String[] stringArray = content.split(",");

        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", stringArray[0])).list();

        //checks if username exists in sql tables
        if (userPersons.isEmpty()) {
            Person p1 = new Person(stringArray[0], stringArray[1], stringArray[2], Integer.parseInt(stringArray[3]), new HashMap<Long, Note>(), new HashMap<Long,Note>());
            session.saveOrUpdate(p1);
            session.getTransaction().commit();
            return "Correct";
        } else {
            session.getTransaction().commit();
            return "error";
        }
    }
    
    
    //get all persons from sql tables
    @Path("All")
    @GET
    @Produces(MediaType.APPLICATION_XML)
    public List getAllPersons(){
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();
        List persons = session.createCriteria(Person.class).list();
        
         session.getTransaction().commit();
        
        return persons;
    }
    
    
    
    
    // gets all the names of the users of the sql table
    @Path("/All/Names")
    @GET
    @Produces(MediaType.APPLICATION_XML)
    public String getAllNames(){
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();
        List persons = session.createCriteria(Person.class).list();
        
        StringBuffer sb = new StringBuffer("<names>");
        
        for(Object i : persons){
            Person person  = (Person)i;
            
            sb.append("<name>");
            sb.append(person.getName());
            sb.append("</name>");
        }
        sb.append("</names>");
         session.getTransaction().commit();
        return sb.toString();
    }
    
    //Used to create a new note
    @Path("/note/")
    @PUT
    @Consumes(MediaType.TEXT_PLAIN)
    @Produces(MediaType.APPLICATION_XML)
    public Note createNewNote(String string) {
        String[] stringArray = string.split(",");

        Note n1 = new Note(stringArray[0], stringArray[1], Integer.parseInt(stringArray[2]),stringArray[3]);
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        session.saveOrUpdate(n1);
        session.getTransaction().commit();

        return n1;
    }

    //returns full xml of person given as path parameter
    @Path("/{userId}/")
    @GET
    @Produces(MediaType.APPLICATION_XML)
    public Person getPerson(@PathParam("userId") String id) {
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        List persons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", id)).list();
        session.getTransaction().commit();
        Person person = (Person) persons.get(0);

        return person;
    }
    
    //returns access level of username
    @Path("/{userId}/accessLevel")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String getAccessLevel(@PathParam("userId") String id){
         Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        List persons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", id)).list();
        Person person = (Person)persons.get(0);
        
        return person.getAccessLevel() + "";
    }

    

    //Return all unassigned notes
    @Path("/{accessLevel}/UnassignedNotes")
    @GET
    @Produces(MediaType.APPLICATION_XML)
    @Consumes(MediaType.TEXT_PLAIN)
    public List<Note> getUnassignedNotes(@PathParam("accessLevel") String accessLevelString) {
        
        
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();
        
         List persons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", accessLevelString)).list();
         Person person = (Person) persons.get(0);
        
        int accessLevel = person.getAccessLevel();
        
        List<Note> notes;
        if(accessLevel > 0){
        notes = session.createCriteria(Note.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("isAssigned", 0)).add(Restrictions.eq("accessLevel", accessLevel)).list();
        } else {
        notes = session.createCriteria(Note.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("isAssigned", 0)).list();    
        }
        session.getTransaction().commit();
        return notes;

    }

    //Changes parameter persons email field to data given
    @Path("/{userId}/{userPassword}/email")
    @POST
    @Consumes(MediaType.TEXT_PLAIN)
    @Produces(MediaType.TEXT_PLAIN)
    public String setEmail(@PathParam("userId") String userId, @PathParam("userPassword") String userPassword, String Email) throws Exception {
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        //checking that the users given passwords are correct
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        if (userPerson.getPassword().equals(userPassword)) {

            List persons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
            Person person = (Person) persons.get(0);

            person.setEmail(Email);

            session.saveOrUpdate(person);
            session.getTransaction().commit();

            return person.getEmail();
        } else {
            session.getTransaction().commit();
            throw new Exception("Wrong PassWord");
        }
    }
    //Puts the note back to the unassigned notes

    @Path("/{userId}/UnassignedNotes")
    @PUT
    @Produces(MediaType.APPLICATION_XML)
    @Consumes(MediaType.TEXT_PLAIN)
    public Note returnToUnassignedNotes(@PathParam("userId") String userId, String idAsString) {
        long id = Long.parseLong(idAsString);
        
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();
        
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);
        
        List<Note> notes = session.createCriteria(Note.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("id", id)).list();
        Note note = (Note) notes.get(0);
        
        //Checking if not is assigned to someone'
        //deleting from person notes and complete if it contains the given note
        if(userPerson.getPersonalNotes().containsKey(id)){
            userPerson.getPersonalNotes().remove(id);
        }
        
        userPerson.getCompletedNotes().remove(id);
       
        note.setIsAssigned(0);
        
        session.saveOrUpdate(note);
        session.saveOrUpdate(userPerson);
        session.getTransaction().commit();

        return note;
        
        
        /*
        
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();
        List<Note> notes = session.createCriteria(Note.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("id", id)).list();
        Note note = (Note) notes.get(0);

        if (note.getIsAssigned() == 0) {
        } else if (note.getIsAssigned() == 1) {
            List persons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
            Person person = (Person) persons.get(0);

            person.getPersonalNotes().remove(id);
            session.saveOrUpdate(person);

        } else {
            List persons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
            Person person = (Person) persons.get(0);

            List<Note> userNotes = person.getCompletedNotes();

            int lengthBefore = userNotes.size();

            //BEWARE SPAGETTI CODE PLEASE KILL IT WITH FIRE
            int counter = -1;

            //Does not work as you cant iterate the collection and delete at the same time
            int toRemove = -1;
            for (Note i : userNotes) {
                counter++;
                if (i.getId() == id) {
                    //removing the note from the database
                    toRemove = counter;
                }
            }
            if (toRemove != -1) {
                userNotes.remove(toRemove);
            };

            session.saveOrUpdate(person);

        }
        note.setIsAssigned(0);
        session.getTransaction().commit();

        return note;
        */
    }

    //Changes parameter persons password field to data given
    @Path("/{userId}/{userPassword}/password")
    @POST
    @Consumes(MediaType.TEXT_PLAIN)
    @Produces(MediaType.TEXT_PLAIN)
    public String setPassword(@PathParam("userId") String userId, @PathParam("userPassword") String userPassword, String password) throws Exception {
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        //checking that the users given passwords are correct
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        if (userPerson.getPassword().equals(userPassword)) {

            List persons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
            Person person = (Person) persons.get(0);

            person.setPassword(password);

            session.saveOrUpdate(person);
            session.getTransaction().commit();

            return person.getPassword();
        } else {
            session.getTransaction().commit();
            throw new Exception("Wrong Username or password");
        }
    }

    //Lists all Notes that a person has
    @Path("/{userId}/Note")
    @GET
    @Produces(MediaType.APPLICATION_XML)
    public ArrayList<Note> getAllNotes(@PathParam("userId") String userId) {
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        Map<Long, Note> notesIn = userPerson.getPersonalNotes();
        session.getTransaction().commit();

        ArrayList<Note> notes = new ArrayList<Note>();
        for (long key : notesIn.keySet()) {
            notes.add(notesIn.get(key));

        }

        return notes;
    }

    //puts selected note id into assiged note of person
    @Path("/{userId}/Notes")
    @PUT
    @Consumes(MediaType.TEXT_PLAIN)
    @Produces(MediaType.APPLICATION_XML)
    public Note giveNoteToPerson(@PathParam("userId") String userId, String idAsString) throws Exception {
        long id = Long.parseLong(idAsString);
        
        
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();
        
         List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        List notes = session.createCriteria(Note.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("id", id)).list();
        Note note = (Note) notes.get(0);
        
        //Checking if not is assigned to someone'
        //deleting from person notes and complete if it contains the given note
        if(userPerson.getPersonalNotes().containsKey(id)){
            userPerson.getPersonalNotes().remove(id);
        }
        
        userPerson.getCompletedNotes().remove(id);
        
        
        //adding to person notes
        
        userPerson.getPersonalNotes().put(id, note);
        
        note.setIsAssigned(1);
        
        session.saveOrUpdate(note);
        session.saveOrUpdate(userPerson);
        session.getTransaction().commit();

        return note;
        
        
        /*
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        List notes = session.createCriteria(Note.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("id", id)).list();
        Note note = (Note) notes.get(0);
        
        if(note.getIsAssigned() == 1 || note.getIsAssigned() == 0){
            
            
        } else {
            List<Note> userNotes = userPerson.getCompletedNotes();

            int lengthBefore = userNotes.size();

            //BEWARE SPAGETTI CODE PLEASE KILL IT WITH FIRE
            int counter = -1;

            //Does not work as you cant iterate the collection and delete at the same time
            int toRemove = -1;
            for (Note i : userNotes) {
                counter++;
                if (i.getId() == id) {
                    //removing the note from the database
                    toRemove = counter;
                }
            }
            if (toRemove != -1) {
                userNotes.remove(toRemove);
            };

        }
        
        
        
        note.setIsAssigned(1);
        userPerson.getPersonalNotes().put(note.getId(), note);

        session.saveOrUpdate(userPerson);
        session.getTransaction().commit();
        return note;
        */
    }

    @Path("/{userId}/DoneNotes")
    @GET
    @Produces(MediaType.APPLICATION_XML)
    @Consumes(MediaType.TEXT_PLAIN)
    public List<Note> getCompleatedNotes(@PathParam("userId") String userId) {
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        //checking that the users given passwords are correct
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        Map<Long, Note> notesIn = userPerson.getCompletedNotes();
        session.getTransaction().commit();

        ArrayList<Note> notes = new ArrayList<Note>();
        for (long key : notesIn.keySet()) {
            notes.add(notesIn.get(key));

        }

        return notes;
    }

    //Puts assigned notes into Done notes
    @Path("/{userId}/DoneNotes")
    @PUT
    @Consumes(MediaType.TEXT_PLAIN)
    @Produces(MediaType.APPLICATION_XML)
    public Note moveToDone(@PathParam("userId") String userId, String idAsString) {
        long id = Long.parseLong(idAsString);
        
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();
        
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        List notes = session.createCriteria(Note.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("id", id)).list();
        Note note = (Note) notes.get(0);
        
        //Checking if not is assigned to someone'
        //deleting from person notes and complete if it contains the given note

        userPerson.getPersonalNotes().remove(id);  
       
       
        
        userPerson.getCompletedNotes().remove(id);
        
        
        //adding to person notes
        
        userPerson.getCompletedNotes().put(id,note);
        
        note.setIsAssigned(2);
        
        session.saveOrUpdate(note);
        session.saveOrUpdate(userPerson);
        session.getTransaction().commit();

        return note;
        
        
        /*
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        List<Note> notes = session.createCriteria(Note.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("id", id)).list();
        Note note = notes.get(0);
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        Note n1 = new Note();
        if(note.getIsAssigned() == 1){
        n1 = userPerson.getPersonalNotes().get(id);
        
        
        userPerson.getPersonalNotes().remove(id);
        n1.setIsAssigned(2);
        userPerson.getCompletedNotes().add(n1);
        } else {
            
            n1 = note;
            note.setIsAssigned(2);
            session.saveOrUpdate(n1);
            userPerson.getCompletedNotes().add(n1);
        }
        

        

        session.saveOrUpdate(userPerson);
        session.getTransaction().commit();
        return n1;

        */
    }

    @Path("/{userId}/Delete")
    @PUT
    @Consumes(MediaType.TEXT_PLAIN)
    @Produces(MediaType.TEXT_PLAIN)
    public String deleteCompleatedNotes(@PathParam("userId") String userId, String idAsString) {
        long id = Long.parseLong(idAsString);
        
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();
        
         List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        List notes = session.createCriteria(Note.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("id", id)).list();
        Note note = (Note) notes.get(0);
        
        //Checking if not is assigned to someone'
        //deleting from person notes and complete if it contains the given note
        if(userPerson.getPersonalNotes().containsKey(id)){
            userPerson.getPersonalNotes().remove(id);
        }
        
        userPerson.getCompletedNotes().remove(id);

        session.delete(note);
        session.saveOrUpdate(userPerson);
        session.getTransaction().commit();

        return "note deleted";

        /*

        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        //checking where not is located. unassigned, on person, or in completed
        List<Note> notes = session.createCriteria(Note.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("id", id)).list();

        //returns message to user if id cant be found in the database
        if (notes.isEmpty()) {
            session.getTransaction().commit();
            return "Could not delete ID";
        }

        Note note = notes.get(0);

        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("name", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        //checking where the not is currently and deleting it from there
        if (note.getIsAssigned() == 1) {
            userPerson.getPersonalNotes().remove(note.getId());
            session.saveOrUpdate(userPerson);
            session.delete(note);
            session.getTransaction().commit();
            return "note deleted";
        } else if (note.getIsAssigned() == 2) {

            List<Note> userNotes = userPerson.getCompletedNotes();

            int lengthBefore = userNotes.size();
            System.out.println(lengthBefore);

            //BEWARE SPAGETTI CODE PLEASE KILL IT WITH FIRE
            int counter = -1;

            //Does not work as you cant iterate the collection and delete at the same time
            int toRemove = -1;
            for (Note i : userNotes) {
                counter++;
                if (i.getId() == id) {
                    //removing the note from the database
                    session.delete(i);
                    toRemove = counter;
                }
            }
            if (toRemove != -1) {
                userNotes.remove(toRemove);
            };

            int lengthAfter = userNotes.size();
            System.out.println(lengthAfter);
            //updating the person
            session.saveOrUpdate(userPerson);

            if (lengthBefore == lengthAfter) {
                session.getTransaction().commit();
                return "Could not delete ID";
            }

            session.getTransaction().commit();
            return "note deleted";

        } else {
            session.delete(note);
            session.getTransaction().commit();
            return "note deleted";
        }
        */
    }
}
