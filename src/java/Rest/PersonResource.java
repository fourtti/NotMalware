/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Rest;

import Hibernate.HibernateStuff;
import Model.Note;
import Model.Person;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.Consumes;
import javax.ws.rs.Produces;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PUT;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.MediaType;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

/**
 * REST Web Service
 *
 * @author Niklas
 */
@Path("person")
public class PersonResource {

    @Context
    private UriInfo context;

    /**
     * Creates a new instance of PersonResource
     */
    public PersonResource() {
    }

    /**
     * Retrieves representation of an instance of Rest.PersonResource
     *
     * @return an instance of java.lang.String
     */
    @GET
    @Produces(MediaType.APPLICATION_XML)
    public void getXml() {
        //TODO remove after test
    }

    /**
     * PUT method for updating or creating an instance of PersonResource
     *
     * @param content representation for the resource
     */
    @PUT
    @Consumes(MediaType.TEXT_PLAIN)

    public void putXml(String content) {
        String[] stringArray = content.split(",");

        Person p1 = new Person(stringArray[0], stringArray[1], stringArray[2], 0, new HashMap<Long, Note>(), new ArrayList<Note>());
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        session.saveOrUpdate(p1);
        session.getTransaction().commit();
        System.out.println("");
    }

    //returns full xml of person given as path parameter
    @Path("/{userId}/{userPassword}/{personId}/")
    @GET
    @Produces(MediaType.APPLICATION_XML)
    public Person getPerson(@PathParam("personId") long id, @PathParam("userId") long userId, @PathParam("userPassword") String userPassword) throws Exception {
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        //checking that the users given passwords are correct 
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("id", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        if (userPerson.getPassword().equals(userPassword)) {

            List persons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("id", id)).list();
            session.getTransaction().commit();
            Person person = (Person) persons.get(0);

            return person;
        } else {
            throw new Exception("Wrong username or password");
        }

    }

    // gets path parameeters persons email
    @Path("/{userId}/{userPassword}/email")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String getEmail(@PathParam("userId") long userId, @PathParam("userPassword") long userPassword) throws Exception {
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        //checking that the users given passwords are correct 
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("id", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        if (userPerson.getPassword().equals(userPassword)) {

            List persons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("id", userId)).list();
            Person person = (Person) persons.get(0);

            session.getTransaction().commit();
            return person.getEmail();
        } else {
            throw new Exception("wrong username or password");
        }
    }

    @Path("/{userId}/{userPassword}/email")
    @POST
    @Consumes(MediaType.TEXT_PLAIN)
    @Produces(MediaType.TEXT_PLAIN)
    public String setEmail(@PathParam("userId") long userId, @PathParam("userPassword") long userPassword, String Email) throws Exception {
        Session session = HibernateStuff.getInstance().getSessionFactory().openSession();
        session.beginTransaction();

        //checking that the users given passwords are correct 
        List userPersons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("id", userId)).list();
        Person userPerson = (Person) userPersons.get(0);

        if (userPerson.getPassword().equals(userPassword)) {

            List persons = session.createCriteria(Person.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).add(Restrictions.eq("id", userId)).list();
            Person person = (Person) persons.get(0);
            
            person.setEmail(Email);
            
            session.saveOrUpdate(person);
            session.getTransaction().commit();
            
            return person.getEmail();
        }
        else {
            throw new Exception("Wrong Email or password");
        }
    }

}
